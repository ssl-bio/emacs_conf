#+STARUP: hidestars
* Setup custom file
- Customizations can become too long thus, it is better to set up the customize file to a separate file  and keep the  =init.el= file less cluttered.
:setup-custom:
#+BEGIN_SRC emacs-lisp :results silent
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
:END:
* Session defaults
:defaults:
#+BEGIN_SRC emacs-lisp :results silent
  ;; Editing options
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil) ;;select and edit region
  (delete-selection-mode t) ;; delete the region when typing
  (cua-mode 0) ;Disable cua mode

  ;; Use UTF8
  (setq locale-coding-system 'utf-8) 
  (set-terminal-coding-system 'utf-8) 
  (set-keyboard-coding-system 'utf-8) 
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)



  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  ;; Visual customizations
  (blink-cursor-mode -1) ;; disable blinking cursor
  (setq visible-bell nil) ;; disable visible bell
  ;; (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)
  (show-paren-mode t) ;; highlight matching parenthesis
  (column-number-mode t) ;; Show column number
  (global-visual-line-mode) ;; wrap text (justify)
  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)
  
  ;; Make buffer's names unique by adding a path
  (setq uniquify-buffer-name-style 'forward)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Server start
  (load "server")
  (unless (server-running-p)
    (server-start)
    ;; (setq server-socket-dir "~/.emacs.d/server")
    )
#+END_SRC
:END:
** Custom variables
:custom-vars:
#+begin_src emacs-lisp :results silent
  ;;  Load shell conf (.bashrc)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src
:END:
** Packages without configuration
:install-packages:
#+begin_src emacs-lisp :results silent
(setq ipackages '(magit ox-gfm org auctex ebib ess helm-R olivetti unfill))
;; install themes 
(dolist (package ipackages)
  (unless (package-installed-p package)
    (package-install package)))
#+end_src
:END:
:install-packages:
#+begin_src emacs-lisp :results silent
(setq ipackages '(magit))
;; install themes 
(dolist (package ipackages)
  (unless (package-installed-p package)
    (package-install package)))
#+end_src
:END:
* Theme
[[https://emacsthemes.com/][List of themes]]
** Install themes
:install-themes:
#+begin_src emacs-lisp :results silent
(setq ithemes '(leuven-theme darktooth-theme autumn-light-theme avk-emacs-themes))
;; install themes 
(dolist (package ithemes)
  (unless (package-installed-p package)
    (package-install package)))
#+end_src
:END:
** Default  theme
:load-darktooth:
#+begin_src emacs-lisp
  (use-package darktooth-theme
    :ensure t
    :init (load-theme 'darktooth t))
#+end_src
:END:
** All the icons
:all-the-icons:
#+begin_src emacs-lisp :results silent
  ;;Install icons for files and folders
  (use-package all-the-icons 
    :ensure t)
#+end_src
:END:   
** Modeline
=Modeline= is the region on a window where the file name and the active modes (among other information) are displayed. These packages help organizing
*** Doom-modeline
:doom-modeline:
#+begin_src emacs-lisp :results silent
  ;; Customize modeline
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src
:END:
* Windows
** Resize
- Keybindings to resize windows.
:resize-widows:
#+BEGIN_SRC emacs-lisp :results silent
  (bind-key "s-C-<left>"  'shrink-window-horizontally)
  (bind-key "s-C-<right>" 'enlarge-window-horizontally)
  (bind-key "s-C-<down>"  'shrink-window)
  (bind-key "s-C-<up>" 'enlarge-window)
#+END_SRC
:END:

** Split
- Split windows and switch
:split-window:
#+BEGIN_SRC emacs-lisp :results silent
  ;;Define functions to split a window vertically or horizontally
  (defun vsplit-other-window ()
    "Splits the window vertically and switches to that window."
    (interactive)
    (split-window-vertically)
    (other-window 1 nil))
  (defun hsplit-other-window ()
    "Splits the window horizontally and switches to that window."
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil))

  ;; Define keybindings for using the above functions
  (bind-key "C-x 2" 'vsplit-other-window)
  (bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC
:END:

* Navigating
** Move between windows
Define Keybindings to move between windows
:win-move:
#+begin_src emacs-lisp :results silent
  ;; Move between windows using the 'Super' (Windows) key
  (global-set-key [s-left] 'windmove-left) ;move to left window
  (global-set-key [s-right] 'windmove-right) ;move to right window
  (global-set-key [s-up] 'windmove-up) ;move to upper window
  (global-set-key [s-down] 'windmove-down) ;move to lower window
#+end_src
:END:

** Eyebrowse
[[https://depp.brause.cc/eyebrowse/][Eyebrowse]], helps manage window configurations. For example one can split a frame into 3 windows (Directory list, terminal and text file) then, create a new configuration ~C-c C-w 2~ and split the frame in a different way, say to only edit a single file. Swiching to the first configuration is done with ~C-c C-w 1~
:eyebrowse:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package eyebrowse
    :ensure t
    :config 
    (eyebrowse-mode))
#+END_SRC
:END:
** Bookmarks
:bookmarks:
#+begin_src emacs-lisp :results silent
  (use-package bm
    :ensure t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)

    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers t)

    ;; where to store persistant files
    (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook 'after-init-hook 'bm-repository-load)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

    ;; Set keybindings to set bookmarks in the buffer
    :bind (("C-c <right>" . bm-next)
           ("C-c <left>" . bm-previous)
           ("C-c b" . bm-toggle))
    )
#+end_src
:END:

** Recentf
- Create a list of recently opened files
  :recentf:
  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :ensure t
      :config
      (recentf-mode t)
      (setq recentf-max-menu-items 25)
      (setq recentf-max-saved-items 25)
      (global-set-key "\C-x\ \C-r" 'recentf-open-files))
  #+END_SRC
  :END:
** Treemacs
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] - a tree layout file explorer for Emacs
:treemacs:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs)
          ;; ([f9]        . treemacs-projectile-toggle)
          ;; ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
          ))
  ;; (use-package treemacs-projectile
  ;;   :defer t
  ;;   :ensure t
  ;;   :config
  ;;   (setq treemacs-header-function #'treemacs-projectile-create-header)
  ;;   )

#+END_SRC
:END:
** Imenu
[[https://www.emacswiki.org/emacs/ImenuMode][Imenu]] produces menus for accessing locations in documents
:imenu-keybindings:
#+begin_src emacs-lisp
  (use-package imenu
    :ensure nil
    :bind(
          ("C-c i" . imenu-list)
          )
    )
  #+end_src
:END:
* List buffers
** Ibuffer
[[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer]] is the improved version of list-buffers.
:ibuffer:
#+BEGIN_SRC emacs-lisp :result silent
  ;; set as default
  (defalias 'list-buffers 'ibuffer)

  ;; source: http://ergoemacs.org/emacs/emacs_buffer_management.html
  (add-hook 'dired-mode-hook 'auto-revert-mode)

  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; hide buffers that begin with *
  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "^\\*")

  ;;hide Filename process cycling with backtick
  (setq ibuffer-format-save ibuffer-formats)
  (setq ibuffer-formats (append ibuffer-formats '((mark modified " " name))))

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("Html" (mode . mhtml-mode))
                 ("org" (name . "^.*org$"))
                 ("markdown" (name . "^.*md$"))
                 ("yaml" (name . "^.*yaml$"))
                 ("magit" (mode . magit-mode))
                 ;; ("web" (or (mode . web-mode) 
                 ;;            (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) 
                              (mode . shell-mode)))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . c++-mode)
                                 ))
                 ("Bash" (or (name . "^.*sh$")))
                 ("TeX"(or (mode . latex-mode)
                           (mode . bibtex-mode
                                 )))
                 ("txt"(or (name ."^.*txt$")))
                 ("R" (or (name . "^.*R$")
                          (name . "^.*Rmd$")
                          (mode . ess-mode)))
                 ("Lisp" (or(mode . emacs-elisp-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

    ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC
:END:
* Helm
/"[[https://emacs-helm.github.io/helm/][Helm]] is an Emacs framework for incremental completions and narrowing selections. It helps to rapidly complete file names, buffer names, or any other Emacs interactions requiring selecting an item from a list of possible choices."/
:helm-config:
#+begin_src emacs-lisp :results silent
  (use-package helm
    :ensure nil
    :init
    (helm-mode 1)
    (helm-autoresize-mode 1)
    :bind (
           ("M-x" . helm-M-x)
           ("C-c h o" . helm-occur) ; show lines matching regex
           ("C-x C-f" . helm-find-files) ; find files in pwd
           ("C-x b" . helm-mini) 
           ("C-c y". helm-show-kill-ring)
           ("C-c m" . helm-bookmarks)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action) ; rebind tab to run ;;persistent action
           ("C-i" . helm-execute-persistent-action) ; make TAB works in ;;terminal
           ("C-z" . helm-select-action) ; list actions using C-z
           :map shell-mode-map
           ("C-c C-l" . helm-comint-input-ring) ; in shell mode
           :map minibuffer-local-map
           ("C-c C-l" . helm-minibuffer-history))
    :config
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-echo-input-in-header-line t)
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20)
    )

  (use-package swiper-helm
    :ensure t
    :bind
    (("C-s" . swiper-helm))
    )
#+end_src
:END:
* Org-mode
** Aspect
*** General setup
:general-setup:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package org
    :ensure t
    :pin elpa
    ;; :commands (org-capture org-agenda)
    :hook ((org-mode . yas-minor-mode)
           (org-mode . org-indent-mode))
    :config
    (setq org-ellipsis "▿")
    ;; (setq org-hide-emphasis-markers t)
    (setq org-use-speed-commands t)
    (setq org-image-actual-width 550)
    (setq org-highlight-latex-and-related '(latex script entities))
    ;; reduce space between header and tags
    (setq org-tags-column 47)

    ;;Function to indent code
    (defun indent-org-block ()
      (interactive)
      (when (org-in-src-block-p)
        (org-edit-special)
        (indent-region (point-min) (point-max))
        (org-edit-src-exit)))

    ;; Keybinding
    (define-key org-mode-map
      (kbd "C-x /") #'indent-org-block)
    )
#+END_SRC
:END:
*** Setup fonts
:Font-faces:
#+begin_src emacs-lisp :results silent
  ;;   Set for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.0)
                  (org-level-3 . 1.0)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    )
#+end_src
:END:
*** Org-bullets
Change the aspect of the bullets used in headings
:bullets:
#+begin_src emacs-lisp :results silent
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :custom
    (org-bullets-bullet-list '("◉" "●" "▷" "▶" "●" "✸"))
    )
#+end_src
:END:
* Coding
** General
:general-options:
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
:END:
*** Hideshow
- [[https://www.emacswiki.org/emacs/HideShow][Hideshow]] Minormode to hide blocks of code
:hideshow-minormode:
#+begin_src emacs-lisp :results silent
  (defun toggle-selective-display (column)
     (interactive "P")
     (set-selective-display
      (or column
          (unless selective-display
            (1+ (current-column))))))
   (defun toggle-hiding (column)
     (interactive "P")
     (if hs-minor-mode
         (if (condition-case nil
                 (hs-toggle-hiding)
               (error t))
             (hs-show-all))
       (toggle-selective-display column)))

  ;;Define Keybindings for hiding/showing code
  (global-set-key (kbd "C-+") 'toggle-hiding)
  (global-set-key (kbd "C-\\") 'toggle-selective-display)
  ;; (add-hook 'web-mode-hook (lambda () (hs-minor-mode 1)))
  (add-hook 'ess-r-mode-hook (lambda () (hs-minor-mode 1)))
#+end_src
:END:
** Python (Anaconda)
Change the path for the anaconda (miniconda) installation accordingly
:config:
#+begin_src emacs-lisp
  (use-package conda
   :ensure t
   ;; :defer t
   :init
   ;; (add-to-list 'exec-path "~/.local/bin/miniconda3/bin")
   :config
   (setq conda-anaconda-home (expand-file-name "~/.local/bin/miniconda3"))
   (setq conda-env-home-directory (expand-file-name "~/.local/bin/miniconda3"))
   (conda-env-autoactivate-mode t)
   )

   (use-package anaconda-mode
    :ensure t
    :hook
    ((python-mode . anaconda-mode)
     (python-mode . anaconda-eldoc-mode)
     (python-mode . yas-minor-mode)
     )
    )

  (use-package company-anaconda
    :ensure t
    :config
    (eval-after-load "company"
      '(add-to-list 'company-backends '(company-anaconda))))

  (use-package python-black
    :demand t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))

  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    ;; workon home
    (setenv "WORKON_HOME" "/home/saul/.local/bin/miniconda3/envs/")
    (setq python-shell-virtualenv-path
	"/home/saul/.local/bin/miniconda3/envs/"
	elpy-rpc-virtualenv-path
	"/home/saul/.local/bin/miniconda3/envs/"
	elpy-rpc-python-command "python"))
#+end_src
:END:
** Html
- [[https://web-mode.org/][Webmode]]: Major mode for editing web templates
:webmode:
#+begin_src emacs-lisp :results silent
  (use-package web-mode
    :ensure t
     :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-enable-current-column-highlight t)
    (add-hook 'web-mode-hook #'yas-minor-mode)
    )

#+end_src
:END:
** Latex
*** General
:General-options:
#+begin_src emacs-lisp :results silent
  (setq TeX-auto-save t); Enable parse on save.
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook #'flyspell-mode)
  (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook #'yas-minor-mode)
#+end_src
:END:
*** Aspect
:editing-customizations:
#+begin_src emacs-lisp :results silent
  (use-package magic-latex-buffer
    :ensure t
    :init
    (add-hook 'LaTeX-mode-hook 'magic-latex-buffer)
    (add-hook 'LaTeX-mode-hook 'olivetti-mode)
    ;;(add-hook 'LaTeX-mode-hook 'fuente-variable)
    (add-hook 'LaTeX-mode-hook 'variable-pitch-mode)
    (setq magic-latex-enable-block-highlight nil
          magic-latex-enable-suscript        t
          magic-latex-enable-pretty-symbols  t
          magic-latex-enable-block-align     nil
          magic-latex-enable-inline-image    nil
          magic-latex-enable-minibuffer-echo nil)
    )
#+end_src
:END:
*** Auctex and Reftex
:auctex-reftex-conf:
#+begin_src emacs-lisp :results silent
  (require 'reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex); with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
  (setq reftex-plug-into-AUCTeX t) ; Integrate RefTeX with AUCTeX

  ;;Keybinding for folding sections
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map (kbd "<C-tab>") 'outline-toggle-children)))
#+end_src
:END:
*** Synctex
:synctex:
#+begin_src emacs-lisp :results silent
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-source-correlate-start-server t)
  (setq TeX-parse-self t); Enable parse on load.
  (add-hook 'TeX-mode-hook
            (lambda () (TeX-fold-mode 1)));

#+end_src
:END:
*** View output (pdf)
:pdf-settings:
#+begin_src emacs-lisp
  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
            'TeX-revert-document-buffer)
#+end_src
:END:
** Terminal
Setup terminal emulators, [[https://www.emacswiki.org/emacs/AnsiTermHints][ansi-term]] and [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]]
*** Ansi-term
#+begin_src emacs-lisp :results silent
  (defvar my-term "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term)))
  (ad-activate 'ansi-term)
  (global-set-key (kbd "<s-return>") 'ansi-term)
  (eval-after-load "term"
  '(define-key term-raw-map (kbd "s-y") 'term-paste))
#+end_src
*** eshell
:eshell-config: 
#+begin_src emacs-lisp :results silent
  (setq eshell-prompt-regexp "^[^#$\n]*[#$] "
        eshell-prompt-function
        (lambda nil
          (concat
           "[" (user-login-name) "@" (system-name) " "
           (if (string= (eshell/pwd) (getenv "HOME"))
               "~" (eshell/basename (eshell/pwd)))
           "]"
           (if (= (user-uid) 0) "# " "$ "))))  
#+end_src
:END:
* Dired
** Configuration
:dired-config:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package dired
    :ensure nil
    :init
    ;; Hide details such as permissions or modification date
    (add-hook 'dired-mode-hook 'dired-hide-details-mode)
    :commands
    (dired dired-jump)

    ;;Jumps to the parent level
    :bind (("C-x C-j" . dired-jump))
    :config

    (setq dired-dwim-target t) ;try to guess where to copy...

    :custom
    ;; Sorting folders and files
    ((dired-listing-switches "-agho --group-directories-first"))

    )

  ;; Use icons for folders and files
  (use-package all-the-icons-dired
    :after dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode)
    )

  ;;Dired narrow allows filter by pattern, regex
  (use-package dired-narrow
    :after dired
    :ensure t
    :config
    (bind-key "C-c C-n" #'dired-narrow)
    (bind-key "C-c C-f" #'dired-narrow-fuzzy)
    (bind-key "C-x C-N" #'dired-narrow-regexp)
    )

  ;; Allows open a folder with tab as a subtree
  (use-package dired-subtree
    :after dired
    :ensure t
    :config
    (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
    (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)
    )

  ;; Prevent opening multiple buffers
  (use-package dired-single
    :after dired
    :ensure t
    :config
    (define-key dired-mode-map [return] 'dired-single-buffer)
    (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
    (define-key dired-mode-map "^" 'dired-single-up-directory)
    )
#+END_SRC
:END:
* PDF
** PDF tools
Use pdf-tools as default pdf viewer in emacs. Customize navigation and highlighting
#+begin_src emacs-lisp :results silent
  (use-package pdf-tools
    :ensure t
    ;; :defer t
    :config
    ;; initialise
    (pdf-tools-install)
    ;; (pdf-loader-install) ;;to speedup loading
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-width)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; use normal isearch
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    ;; turn off cua so copy works
    ;; (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    ;; more fine-grained zooming
    (setq pdf-view-resize-factor 1.1)
    ;; keyboard shortcuts
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
    ;; customize highlight color
    (setq pdf-annot-default-annotation-properties
          '((t
             (label . "ssl"))
            (text
             (color . "#193365")
             (icon . "Note"))
            (highlight
             (color . "lavender")
             (color . "thistle1"))
            (underline
             (color . "blue"))
            (squiggly
             (color . "orange"))
            (strike-out
             (color . "red"))))
    (setq pdf-annot-color-history '("lavender" "thistle1" "LightSteelBlue1"))
    )
#+end_src
* Editing
** Smoothscrolling
This makes it so C-n-ing and C-p-ing won’t make the buffer jump
around so much.
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode))
#+END_SRC
** Scratch
Convenient package to create *scratch* buffers that are based on the current buffer’s major mode. This is more convienent than manually creating a buffer to do some scratch work or reusing the initial *scratch* buffer.
#+BEGIN_SRC emacs-lisp :results silent
  (use-package scratch
    :ensure t
    :commands scratch)
#+END_SRC
** Flyspell
[[http://www.emacswiki.org/emacs/FlySpell][Source]] [[http://emacs.stackexchange.com/questions/13361/how-do-i-disable-the-emacs-flyspell-middle-mouse-correction][Configure buttons]]
:flyspell-flyspell-correct:
#+begin_src emacs-lisp
   (setq flyspell-sort-corrections nil)
  (setq flyspell-issue-message-flag nil)
                                          ; Enable for text files
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
                                         
  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-helm
    :after flyspell-correct)
#+end_src
:END:
** Company mode
Autocompletion
#+BEGIN_SRC emacs-lisp :results silent
  (use-package company
    :ensure t
    :hook (prog-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection) ;; instead of cycling
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          )
    :custom
    (company-tooltip-limit 10) ;The maximum number of candidates
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.2)
    :config
    (setq company-begin-commands '(self-insert-command))
    )

  ;; (add-hook 'after-init-hook 'global-company-mode)

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+END_SRC

*** Company elisp                            :commented:
#+begin_src emacs-lisp
  ;; (defun company-elisp-finder-keyword-backend (command
  ;; 					     &optional arg &rest ign)
  ;;   "`company-backend' for finder-keywords."
  ;;   (case command
  ;;     (prefix
  ;;      (and (require 'finder nil t)
  ;; 	  (or (company-grab ":group '\\(\\(\\sw\\|\\s_\\)*\\)" 1)
  ;; 	      (company-grab "Keywords:.*[ \t]+\\(\\(\\sw\\|\\s_\\)*\\)" 1))))
  ;;     (candidates (all-completions arg finder-known-keywords))
  ;;     (meta (cdr (assoc (intern arg) finder-known-keywords)))))
    #+end_src
** Which Key
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package which-key
       :ensure t
       :defer t
       :config
       (which-key-mode))
   #+END_SRC
** Expand region, iedit
:expand-region:
   #+begin_src emacs-lisp :results silent
     ;;Gradually expands selected region
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))

     ;; (use-package mark-multiple
     ;;   :ensure t
     ;;   :bind ("C-c =" . 'mark-next-like-this))

     ;;Mark similar occurences and edit them at the same time
     (use-package multiple-cursors
       :ensure t
       :config
       (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
       )


     (use-package iedit
       :ensure t)
   #+end_src
   :END:
** Expand region, iedit
- Gradually expands selected region
:expand-region:
   #+begin_src emacs-lisp :results silent
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))

     ;;Mark similar occurences and edit them at the same time
     (use-package multiple-cursors
       :ensure t
       :config
       (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
       )

     (use-package iedit
       :ensure t)
   #+end_src
   :END:
** Yasnippet
:yasnippet:
#+begin_src emacs-lisp :results silent
  (use-package yasnippet
    :ensure t
    :defer t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
  ;; (define-key yas-minor-mode-map (kbd "M-y") 'yas-expand)
#+end_src
:END:
