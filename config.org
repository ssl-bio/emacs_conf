* Setup custom file
- Customizations can become too long thus, it is better to set up the customize file to a separate file  and keep the  =init.el= file less cluttered.
:setup-custom:
#+BEGIN_SRC emacs-lisp :results silent
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+END_SRC
:END:
* Session defaults
** General
:defaults:
#+BEGIN_SRC emacs-lisp :results silent
  ;; Editing options
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil) ;;select and edit region
  (delete-selection-mode t) ;; delete the region when typing
  (cua-mode 0) ;Disable cua mode

  ;; Use UTF8
  (setq locale-coding-system 'utf-8) 
  (set-terminal-coding-system 'utf-8) 
  (set-keyboard-coding-system 'utf-8) 
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  ;; Visual customizations
  (blink-cursor-mode -1) ;; disable blinking cursor
  (setq visible-bell nil) ;; disable visible bell
  ;; (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)
  (show-paren-mode t) ;; highlight matching parenthesis
  (column-number-mode t) ;; Show column number
  (global-visual-line-mode) ;; wrap text (justify)
  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; Space between lines
  (setq-default line-spacing 4)

  ;; Make buffer's names unique by adding a path
  (setq uniquify-buffer-name-style 'forward)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Server start
  (load "server")
  (unless (server-running-p)
    (server-start)
    ;; (setq server-socket-dir "~/.emacs.d/server")
    )

  ;;  Load shell conf (.bashrc)
  ;; (use-package exec-path-from-shell
  ;;   :ensure t
  ;;   :defer t
  ;;   :init
  ;;   (when (memq window-system '(mac ns x))
  ;;     (exec-path-from-shell-initialize)))
#+END_SRC
:END:
** Custom variables
Links to configuration sections: [[* Python (Anaconda)][Pyhon (Anaconda)]] [[* Org-ref][Org-ref bibtex-path]] [[* Org-reveal][Org-reveal]] [[* Ansi-term][Ansi-term]]
:custom-vars:
#+begin_src emacs-lisp :results silent
  (defvar essl/default-font-size 120)
  (defvar essl/default-variable-font-size 120)

  ;; Path to anaconda installation 
  (defvar essl/anaconda-home "~/.local/bin/miniconda3")
  (defvar essl/anaconda-venv "~/.local/bin/miniconda3/envs/")

  ;; Bibtex paths and files
  (setq
   bibtex-completion-bibliography '("~/Documents/Refs/Bibtex/Working.bib")
   bibtex-completion-library-path '("~/Documents/Papers/")
   bibtex-completion-notes-path "~/Documents/Papers/Notes")

  ;; org-reveal-path
  (setq org-reveal-root "file:///run/media/shared/Cloned/reveal.js")

  ;; Path to bash (ansi term)
  (defvar essl/my-term "/bin/bash")

  ;; Fonts
  (defvar essl/mono-font "Courier New")
  (defvar essl/sans-font "Verdana")
  #+end_src
:END:
** Startup time
:startup-time:
#+begin_src emacs-lisp :results silent
  ;;Tweak garbage collection
  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-threshold (* 50 1000 1000))

  (defun ssl/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'ssl/display-startup-time)

#+end_src
:END:
** Packages without configuration
:install-packages:
#+begin_src emacs-lisp :results silent
  (setq ipackages '(magit ox-gfm org auctex ebib ess helm-R olivetti unfill format-all org poly-R poly-markdown))
  ;; install packages 
  (dolist (package ipackages)
      (straight-use-package package))
#+end_src
:END:
* Theme
[[https://emacsthemes.com/][List of themes]]
** Install themes
:install-themes:
#+begin_src emacs-lisp :results silent
  ;;modus-themes
  (setq ithemes '(base16-theme))

  ;; install themes 
  (dolist (theme ithemes)
    (straight-use-package theme))
#+end_src
:END:
** Preferred themes
:cycle-through-themes:
#+begin_src emacs-lisp :results silent
  ;; List of favorite themes
  (setq my-dark-themes '("base16-da-one-sea" "base16-tokyo-night-storm"
         		       "base16-everforest" "base16-railscasts"
         		       "base16-sandcastle"))
  (setq my-light-themes '("base16-grayscale-light"
      			"dichromacy"
      			"base16-gruvbox-material-light-soft"
      			"base16-rose-pine-dawn" "base16-dirtysea"
  			"base16-equilibrium-gray-light"))
  ;; Cycle through themes
  (defun rotate-dark-themes ()
    (interactive)
    (dolist (theme custom-enabled-themes)
    (disable-theme theme))
    (setq my-dark-themes (append (cdr my-dark-themes) (list (car my-dark-themes))))
    (let ((theme (car my-dark-themes))
        	(command (format "(load-theme '%s t)" (car my-dark-themes))))
      (message "Loading theme: %s" theme)
      ;; (message "Command: %s" command)
      (eval (read command))))

  (defun rotate-light-themes ()
    (interactive)
    (dolist (theme custom-enabled-themes)
    (disable-theme theme))
    (setq my-light-themes (append (cdr my-light-themes) (list (car my-light-themes))))
    (let ((theme (car my-light-themes))
        	(command (format "(load-theme '%s t)" (car my-light-themes))))
      (message "Loading theme: %s" theme)
      ;; (message "Command: %s" command)
      (eval (read command))))

  ;; Asign key
  (global-set-key (kbd "<f12>") 'rotate-dark-themes)
  (global-set-key (kbd "<f9>") 'rotate-light-themes)

  ;; Default theme
  (load-theme 'base16-everforest t)
#+end_src
:END:
** Window size
:window-size:
#+begin_src emacs-lisp :results silent
  ;; Window height
  (add-to-list 'default-frame-alist '(height . 40))
  ;; Window Width
  (add-to-list 'default-frame-alist '(width . 70)) 
#+end_src
:END:

** Font
*** Default font 
:font:
#+begin_src emacs-lisp :results silent
  ;; (set-face-attribute 'default nil :font essl/mono-font :height 120)

  ;; Set the fixed pitch face
  ;; (set-face-attribute 'fixed-pitch nil :font essl/mono-font :height 120)

  ;; Set the variable pitch face
  ;; (set-face-attribute 'variable-pitch nil :font essl/sans-font :height 120)
  ;; Nunito
  ;;:weight 'regular
#+end_src
:END:
*** Font scaling
:font-scaling:
#+begin_src emacs-lisp :results silent
  (use-package default-text-scale
    :straight (default-text-scale :type git 
  	    :flavor melpa 
  	    :host github 
  	    :repo "purcell/default-text-scale")
    :config
    (global-set-key (kbd "C-M-+") 'default-text-scale-increase)
    (global-set-key (kbd "C-M--") 'default-text-scale-decrease))
  (define-key ctl-x-map [(control ?0)] 'zoom-in/out)
#+end_src
:END:
** All the icons
:all-the-icons:
#+begin_src emacs-lisp :results silent
  ;;Install icons for files and folders
  (use-package all-the-icons 
    :straight (all-the-icons :type git 
   			   :flavor melpa 
   			   :files (
   				   :defaults "data" "all-the-icons-pkg.el") 
   			   :host github 
    			   :repo "domtronn/all-the-icons.el"))
#+end_src
:END:   
** Modeline
=Modeline= is the region on a window where the file name and the active modes (among other information) are displayed. Available modelines [[https://github.com/seagle0128/doom-modeline][Doom-modeline]], [[https://github.com/TheBB/spaceline][Spaceline]], [[https://github.com/gexplorer/simple-modeline][Simple modeline]]
*** Doom-modeline                            :commented:
:doom-modeline:
#+begin_src emacs-lisp :results silent
  ;; Customize modeline
  ;; ( use-package doom-modeline
    ;; :straight (doom-modeline :type git 
    ;; 			   :flavor melpa 
    ;; 			   :host github 
    ;; 			   :repo "seagle0128/doom-modeline")
    ;; :init (doom-modeline-mode 1)
    ;; :custom (
    ;;          (doom-modeline-height 20)
    ;;          (setq doom-modeline-window-width-limit 65)
    ;;          (setq doom-modeline-buffer-file-name-style 'auto)
    ;;          (setq doom-modeline-buffer-name t)
    ;;          )
    ;; )
#+end_src
:END:
*** spaceline                                :commented:
:spaceline:
#+begin_src emacs-lisp :results silent
  ;; (use-package spaceline
  ;;   :ensure t
  ;;   :config
  ;;   (require 'spaceline-config)
  ;;   (setq spaceline-buffer-encoding-abbrev-p nil)
  ;;   (setq spaceline-line-column-p nil)
  ;;   (setq spaceline-line-p nil)
  ;;   (setq powerline-default-separator (quote arrow))
  ;;   (spaceline-spacemacs-theme))

 ;; (require 'spaceline-config)
  ;; (spaceline-spacemacs-theme)
#+end_src
:END:
*** simple modeline
#+begin_src emacs-lisp :results silent
  (use-package simple-modeline
    :straight (simple-modeline :type git 
  			     :flavor melpa 
  			     :host github 
  			     :repo "gexplorer/simple-modeline")
    :hook (after-init . simple-modeline-mode))
#+end_src
* Windows
** Resize
- Keybindings to resize windows.
:resize-widows:
#+BEGIN_SRC emacs-lisp :results silent
  (bind-key "s-C-<left>"  'shrink-window-horizontally)
  (bind-key "s-C-<right>" 'enlarge-window-horizontally)
  (bind-key "s-C-<down>"  'shrink-window)
  (bind-key "s-C-<up>" 'enlarge-window)
#+END_SRC
:END:

** Split
- Split windows and switch
:split-window:
#+BEGIN_SRC emacs-lisp :results silent
  ;;Define functions to split a window vertically or horizontally
  (defun vsplit-other-window ()
    "Splits the window vertically and switches to that window."
    (interactive)
    (split-window-vertically)
    (other-window 1 nil))
  (defun hsplit-other-window ()
    "Splits the window horizontally and switches to that window."
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil))

  ;; Define keybindings for using the above functions
  (bind-key "C-x 2" 'vsplit-other-window)
  (bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC
:END:

* Navigating
** Move between windows
Define Keybindings to move between windows
:win-move:
#+begin_src emacs-lisp :results silent
  (global-set-key [s-left] 'windmove-left) ;move to left window
  (global-set-key [s-right] 'windmove-right) ;move to right window
  (global-set-key [s-up] 'windmove-up) ;move to upper window
  (global-set-key [s-down] 'windmove-down) ;move to lower window
#+end_src
:END:
** Eyebrowse
[[https://depp.brause.cc/eyebrowse/][Eyebrowse]], helps manage window configurations. For example one can split a frame into 3 windows (Directory list, terminal and text file) then, create a new configuration ~C-c C-w 2~ and split the frame in a different way, say to only edit a single file. Swiching to the first configuration is done with ~C-c C-w 
:eyebrowse:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package eyebrowse
    :straight (eyebrowse :type git
  			:flavor melpa
  			:repo "https://depp.brause.cc/eyebrowse.git")
    :config 
    (eyebrowse-mode))
#+END_SRC
:END:
** Winner mode                                :commented:
- Winner mode allows you to undo/redo changes to window changes in Emacs and allows you.
#+BEGIN_SRC emacs-lisp
  ;; (use-package winner
  ;;   :ensure t
  ;;   :config
  ;;   (winner-mode t)
  ;;   :bind (("C-c <left>" . winner-undo)
  ;;          ("C-c <right>" . winner-redo)))
#+END_SRC
** Bookmarks
:bookmarks:
#+begin_src emacs-lisp :results silent
  (use-package bm
    :straight (bm :type git
  	  :flavor melpa
  	  :host github
  	  :repo "joodland/bm")
    :ensure t
    :demand t

    :init
    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)


    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers t)

    ;; where to store persistant files
    (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook 'after-init-hook 'bm-repository-load)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

    ;; Set keybindings to set bookmarks in the buffer
    :bind (("C-c <right>" . bm-next)
           ("C-c <left>" . bm-previous)
           ("C-c b" . bm-toggle))
    )

  ;; Color for bookmarks
  ;; (set-face-attribute 'bm-face nil :background "GreenYellow" :foreground 'unspecified)
#+end_src
:END:

** Recentf
- Create a list of recently opened files
  :recentf:
  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :straight t
      :config
      (recentf-mode t)
      (setq recentf-max-menu-items 25)
      (setq recentf-max-saved-items 25)
      (global-set-key "\C-x\ \C-r" 'recentf-open-files))
  #+END_SRC
  :END:
** Treemacs
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] - a tree layout file explorer for Emacs
:treemacs:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package treemacs
    :straight (treemacs :type git
  		      :flavor melpa
  		      :files (:defaults "Changelog.org" "icons" "src/elisp/treemacs*.el" "src/scripts/treemacs*.py" (:exclude "src/extra/*") "treemacs-pkg.el")
  		      :host github
  		      :repo "Alexander-Miller/treemacs")
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs)
          ;; ([f9]        . treemacs-projectile-toggle)
          ;; ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
          ))
  ;; (use-package treemacs-projectile
  ;;   :defer t
  ;;   :ensure t
  ;;   :config
  ;;   (setq treemacs-header-function #'treemacs-projectile-create-header)
  ;;   )

#+END_SRC
:END:
** Imenu
[[https://www.emacswiki.org/emacs/ImenuMode][Imenu]] produces menus for accessing locations in documents
:imenu-keybindings:
#+begin_src emacs-lisp
  (use-package imenu-list
    :straight (imenu-list :type git
  			:flavor melpa
  			:host github
  			:repo "bmag/imenu-list")
    :bind(
          ("C-c i" . imenu-list)
          )
    )
#+end_src
:END:    
* List buffers
** Ibuffer
[[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer]] is the improved version of list-buffers.
:ibuffer:
#+BEGIN_SRC emacs-lisp :result silent
  ;; set as default
  (defalias 'list-buffers 'ibuffer)

  ;; source: http://ergoemacs.org/emacs/emacs_buffer_management.html
  (add-hook 'dired-mode-hook 'auto-revert-mode)

  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; hide buffers that begin with *
  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "^\\*")
  ;;     (mapcar #'regexp-quote '("^\\*helm.*" "^\\*Ebib.*")))
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*helm.*")
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*Ebib.*")
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*swiper.*")
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*Custom.*")
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*Packages.*")
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*Flymake.*")
  ;; (add-to-list 'ibuffer-never-show-predicates "^\\*magit.*")
  ;; (add-to-list 'ibuffer-always-show-predicates "^\\*Python\\*")

  ;;hide Filename process cycling with backtick
  (setq ibuffer-format-save ibuffer-formats)
  (setq ibuffer-formats (append ibuffer-formats '((mark modified " " name))))

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("Web" (or (name . "^.*html$")
                            (name . "^.*css$")
                            (name . "^.*js$")
                            ))
                 ("org" (name . "^.*org$"))
                 ("markdown" (name . "^.*md$"))
                 ("yaml / toml" (or (name . "^.*yaml$")
                                    (name . "^.*toml$")
                                    ))
                 ("magit" (mode . magit-mode))
                 ;; ("web" (or (mode . web-mode) 
                 ;;            (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) 
                              (mode . shell-mode)))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . c++-mode)
                                 ))
                 ("Bash" (or (name . "^.*sh$")))
                 ("TeX"(or (mode . latex-mode)
                           (mode . bibtex-mode
                                 )))
                 ("txt"(or (name ."^.*txt$")))
                 ("R" (or (name . "^.*R$")
                          (name . "^.*Rmd$")
                          (mode . ess-mode)))
                 ("Lisp" (or(mode . emacs-elisp-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC
:END:
* Helm
/"[[https://emacs-helm.github.io/helm/][Helm]] is an Emacs framework for incremental completions and narrowing selections. It helps to rapidly complete file names, buffer names, or any other Emacs interactions requiring selecting an item from a list of possible choices."/
:helm-config:
#+begin_src emacs-lisp :results silent
  (use-package helm
    :straight (helm :type git 
    		  :flavor melpa 
    		  :files ("*.el" "emacs-helm.sh" (
    						  :exclude "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core.el") "helm-pkg.el") 
    		  :host github 
    		  :repo "emacs-helm/helm")
    :init
    (helm-mode 1)
    (helm-autoresize-mode 1)
    :bind (
           ("M-x" . helm-M-x)
           ("C-c h o" . helm-occur) ; show lines matching regex
           ("C-x C-f" . helm-find-files) ; find files in pwd
           ("C-x b" . helm-mini) 
           ("C-c y". helm-show-kill-ring)
           ("C-c m" . helm-bookmarks)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action) ; rebind tab to run ;;persistent action
           ("C-i" . helm-execute-persistent-action) ; make TAB works in ;;terminal
           ("C-z" . helm-select-action) ; list actions using C-z
           :map shell-mode-map
           ("C-c C-l" . helm-comint-input-ring) ; in shell mode
           :map minibuffer-local-map
           ("C-c C-l" . helm-minibuffer-history))
    :config
    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t
          helm-echo-input-in-header-line t)
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 25)
    )

  (use-package swiper-helm
    :straight (swiper-helm :type git 
  			 :flavor melpa 
  			 :host github 
  			 :repo "abo-abo/swiper-helm")
    :bind
    (("C-s" . swiper-helm))
    )
#+end_src
:END:
* Coding
** General
:general-options:
#+begin_src emacs-lisp :results silent
  (electric-pair-mode 1)
  (add-hook 'prog-mode-hook 'linum-mode 1)
  ;; (add-hook 'prog-mode-hook 'outline-minor-mode 1)
  ;; (setq outline-minor-mode-prefix (kbd "C-c ;"))

 #+end_src
:END:
*** Hideshow
:hideshow-minormode:
#+begin_src emacs-lisp :results silent
  (defun toggle-selective-display (column)
    (interactive "P")
    (set-selective-display
     (or column
         (unless selective-display
           (1+ (current-column))))))

  (defun toggle-hiding (column)
    (interactive "P")
    (if hs-minor-mode
        (if (condition-case nil
                (hs-toggle-hiding)
              (error t))
            (hs-show-all))
      (toggle-selective-display column)))

  ;; Define Keybindings for hiding/showing code
  (global-set-key (kbd "C-+") 'toggle-hiding)
  (global-set-key (kbd "C-\\") 'toggle-selective-display)
  ;; (add-hook 'web-mode-hook (lambda () (hs-minor-mode 1)))
  (add-hook 'ess-r-mode-hook (lambda () (hs-minor-mode 1)))
  ;; (add-hook 'python-mode-hook (lambda () (hs-minor-mode 1)))
  #+end_src
:END:
** LSP                                        :commented:
#+begin_src emacs-lisp :results silent
    ;; (defun ssl/lsp-mode-setup ()
    ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    ;;   (lsp-headerline-breadcrumb-mode))

  ;; (use-package lsp-mode
  ;;   :ensure t
  ;;   :init
  ;;   ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  ;;   (setq lsp-keymap-prefix "C-c l")
  ;;   :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
  ;;          (sh-mode . lsp-deferred)
  ;;          ;; if you want which-key integration
  ;;          (lsp-mode . lsp-enable-which-key-integration))
  ;;   :commands lsp)

  ;; ;; optionally
  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :commands lsp-ui-mode)
  ;; ;; if you are helm user
  ;; (use-package helm-lsp
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :commands helm-lsp-workspace-symbol)

#+end_src
** C++
:config:
#+begin_src emacs-lisp
  (progn
    (customize-set-variable 'eglot-autoshutdown t)
    (customize-set-variable 'eglot-extend-to-xref t)
    (customize-set-variable 'eglot-ignored-server-capabilities
                            (quote (:documentFormattingProvider :documentRangeFormattingProvider)))

    (with-eval-after-load 'eglot
      (setq completion-category-defaults nil)
      (add-to-list 'eglot-server-programs
                   '(c-mode c++-mode
                            . ("clangd"
                               "-j=4"
                               "--malloc-trim"
                               "--log=error"
                               "--background-index"
                               "--clang-tidy"
                               "--cross-file-rename"
                               "--completion-style=detailed"
                               "--pch-storage=memory"
                               "--header-insertion=never"
                               "--header-insertion-decorators=0"))))

    (add-hook 'c-mode-hook #'eglot-ensure)
    (add-hook 'c++-mode-hook #'eglot-ensure)
    (add-hook 'cc-mode-hook #'yas-minor-mode)
    (add-hook 'c++-mode-hook #'yas-minor-mode))
#+end_src
:END:
** Python (Anaconda)
Change the path for the anaconda (miniconda) installation accordingly
:config:
#+begin_src emacs-lisp :results silent
  ;; Install and configure Conda
  (use-package conda
    :straight (conda :type git 
        		   :flavor melpa 
        		   :host github 
        		   :repo "necaris/conda.el")
    :init
    ;; (add-to-list 'exec-path "/media/discs/shared/miniconda3/bin/")
    (setq conda-anaconda-home essl/anaconda-home)
    (setq conda-env-home-directory essl/anaconda-venv)
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (conda-env-autoactivate-mode t)
    )

  ;; Set up Elpy with Conda integration
  (use-package elpy
    :straight (elpy :type git 
      		  :flavor melpa 
      		  :files ("*.el" "NEWS.rst" "snippets" "elpy" "elpy-pkg.el") 
      		  :host github 
      		  :repo "jorgenschaefer/elpy")
    :init
    (elpy-enable)

    (setq python-shell-interpreter "python"
          elpy-rpc-virtualenv-path  'current
          python-shell-virtualenv-root essl/anaconda-venv
          elpy-rpc-virtualenv-path  essl/anaconda-venv)
    )

  (use-package company-anaconda
    :straight (company-anaconda :type git 
    			      :flavor melpa 
    			      :host github 
    			      :repo "pythonic-emacs/company-anaconda")
    :config
    (eval-after-load "company"
      '(add-to-list 'company-backends '(company-anaconda)))
    :hook
    (python-mode . anaconda-mode)
    (python-mode . anaconda-eldoc-mode)
    )

  (use-package python-black
    :straight (python-black :type git 
  			  :flavor melpa 
  			  :host github 
  			  :repo "wbolster/emacs-python-black")
    :after python
    :hook
    (python-mode . python-black-on-save-mode-enable-dwim)
    (python-mode . yas-minor-mode)
    (python-mode . linum-mode)
    (python-mode . yafolding-mode)
    )
#+end_src
:END:
** R
*** ESS
:configuration:
#+begin_src emacs-lisp :results silent
  (defun my-ess-hook ()
    ;; ensure company-R-library is in ESS backends
    (make-local-variable 'company-backends)
    (cl-delete-if (lambda (x) (and (eq (car-safe x) 'company-R-args))) company-backends)
    (push (list 'company-R-args 'company-R-objects 'company-R-library :separate)
          company-backends))
  (use-package ess
    :straight (ess :type git 
  		 :flavor melpa 
  		 :files ("lisp/*.el" "doc/ess.texi" ("etc" "etc/*") ("obsolete" "lisp/obsolete/*") (
  												    :exclude "etc/other") "ess-pkg.el") 
  		 :host github 
  		 :repo "emacs-ess/ESS")
    :init
    (add-hook 'ess-r-mode-hook #'hs-minor-mode)
    (add-hook 'ess-r-mode-hook #'my-ess-hook)
    :bind
    ("_" . ess-insert-assign)
    :hook
    (ess-r-mode . linum-mode)
    )

  (use-package format-all
    :straight (format-all :type git 
    			:flavor melpa 
    			:host github 
    			:repo "lassik/emacs-format-all-the-code")
    :hook (ess-mode . format-all-mode)
    :config
    (setq-default format-all-formatters
                  '(("formatR" format-all-r-format-buffer))))

 #+end_src
:END:
*** Rmd
:Rmarkdown:
#+begin_src emacs-lisp
  (require 'poly-R)
  (require 'poly-markdown)
  (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . poly-markdown+r-mode))
#+end_src
:END:
*** Arrow underscore                         :commented:
- To the following would insert ~<-~ whenever ~_~ is pressed
:arrow-ess:
#+begin_src emacs-lisp :results silent
  ;; (use-package ess-r-mode
  ;;   :bind
  ;;   (:map ess-r-mode-map
  ;; 	     ("_" . ess-insert-assign))
  ;;   (:map inferior-ess-r-mode-map
  ;; 	     ("_" . ess-insert-assign)))
  ;; (require 'ess-r-mode)
  ;; (define-key ess-r-mode-map "_" 'ess-insert-assign)
  ;; (define-key inferior-ess-r-mode-map "_" 'ess-insert-assign)
#+end_src   
:END:
** Html
:web-beautify:
#+begin_src emacs-lisp :results silent
  (use-package web-beautify
    :straight (web-beautify :type git 
  			  :flavor melpa 
  			  :host github 
  			  :repo "yasuyk/web-beautify")
    :config
    (eval-after-load 'js2-mode
      '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
    ;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
    (eval-after-load 'js
      '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

    (eval-after-load 'json-mode
      '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

    (eval-after-load 'sgml-mode
      '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

    (eval-after-load 'web-mode
      '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))

    (eval-after-load 'css-mode
      '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))
    )
#+end_src
:END:
- [[https://web-mode.org/][Webmode]]: Major mode for editing web templates
:webmode:
#+begin_src emacs-lisp :results silent
  (use-package web-mode
    :straight (web-mode :type git 
  		      :flavor melpa 
  		      :host github 
  		      :repo "fxbois/web-mode")
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-enable-current-column-highlight t)
    (add-hook 'web-mode-hook #'yas-minor-mode)
    )

#+end_src
:END:
** Flycheck
:bash:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package flycheck
    :straight (flycheck :type git 
  		      :flavor melpa 
  		      :host github 
  		      :repo "flycheck/flycheck")
    :hook
    (python-mode . flycheck-mode)
    (sh-mode . flycheck-mode)
    ;; (setq flycheck-shellcheck-follow-sources nil)
    )
#+END_SRC
** Latex
*** General
:General-options:
#+begin_src emacs-lisp :results silent
  (setq TeX-auto-save t); Enable parse on save.
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode) ;auto-fill-mode
  (add-hook 'LaTeX-mode-hook #'flyspell-mode)
  (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook #'yas-minor-mode)
#+end_src
:END:
*** Aspect
:editing-customizations:
#+begin_src emacs-lisp :results silent
  (use-package magic-latex-buffer
    :straight (magic-latex-buffer :type git 
  				:flavor melpa 
  				:host github 
  				:repo "zk-phi/magic-latex-buffer")
    :init
    (add-hook 'LaTeX-mode-hook 'magic-latex-buffer)
    (add-hook 'LaTeX-mode-hook 'olivetti-mode)
    ;;(add-hook 'LaTeX-mode-hook 'fuente-variable)
    (add-hook 'LaTeX-mode-hook 'variable-pitch-mode)
    (setq magic-latex-enable-block-highlight nil
          magic-latex-enable-suscript        t
          magic-latex-enable-pretty-symbols  t
          magic-latex-enable-block-align     nil
          magic-latex-enable-inline-image    nil
          magic-latex-enable-minibuffer-echo nil)
    )
#+end_src
:END:
*** Helm-bibtex
:helm-bibtex:
#+begin_src emacs-lisp :results silent
  (use-package helm-bibtex
    :straight (helm-bibtex :type git 
  			 :flavor melpa 
  			 :files ("helm-bibtex.el" "helm-bibtex-pkg.el") 
  			 :host github 
  			 :repo "tmalsburg/helm-bibtex")
    :after helm)
  (autoload 'helm-bibtex "helm-bibtex" "" t)
  (global-set-key (kbd "C-c [") 'helm-bibtex-with-local-bibliography)
  (setq  bibtex-completion-cite-prompt-for-optional-arguments nil)
  (helm-delete-action-from-source "Insert Citation" helm-source-bibtex)
  (helm-add-action-to-source "Insert Citation" 
                             'helm-bibtex-insert-citation 
                             helm-source-bibtex 0)

#+end_src
:END:

*** Auctex and Reftex
:auctex-reftex-conf:
#+begin_src emacs-lisp :results silent
  (require 'reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex); with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
  (setq reftex-plug-into-AUCTeX t) ; Integrate RefTeX with AUCTeX

  ;;Keybinding for folding sections
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map (kbd "<C-tab>") 'outline-toggle-children)))
#+end_src
:END:
*** Synctex
:synctex:
#+begin_src emacs-lisp :results silent
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-source-correlate-start-server t)
  (setq TeX-parse-self t); Enable parse on load.
  (add-hook 'TeX-mode-hook
            (lambda () (TeX-fold-mode 1)));

#+end_src
:END:
*** View output (pdf)
:pdf-settings:
#+begin_src emacs-lisp
  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
             'TeX-revert-document-buffer)
#+end_src
:END:
** Polymode
:polymode:
#+begin_src emacs-lisp :results silent
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
#+end_src
:END:
** Terminal
Setup terminal emulators, [[https://www.emacswiki.org/emacs/AnsiTermHints][ansi-term]] and [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]]
*** Ansi-term
#+begin_src emacs-lisp :results silent
  (defadvice ansi-term (before force-bash)
    (interactive (list essl/my-term)))
  (ad-activate 'ansi-term)
  (eval-after-load "term"
    '(define-key term-raw-map (kbd "s-y") 'term-paste))
#+end_src
*** eshell
:eshell-config: 
#+begin_src emacs-lisp :results silent
  (setq eshell-prompt-regexp "^[^#$\n]*[#$] "
        eshell-prompt-function
        (lambda nil
          (concat
           "[" (user-login-name) "@" (system-name) " "
           (if (string= (eshell/pwd) (getenv "HOME"))
               "~" (eshell/basename (eshell/pwd)))
           "]"
           (if (= (user-uid) 0) "# " "$ "))))
    (global-set-key (kbd "<s-return>") 'eshell)
#+end_src
:END:

** C3po                                       :commented:chatGPT:
#+begin_src emacs-lisp
  ;; (use-package c3po
  ;;   :straight (:host github :repo "d1egoaz/c3po.el")
  ;;   :config
  ;;   (setq c3po-api-key ""))
#+end_src
** gptel                                      :chatGPT:commented:
#+begin_src emacs-lisp :results silent
  ;; (defun essl/read-openai-key ()
  ;;   (with-temp-buffer
  ;;     (insert-file-contents "/media/discs/shared/configuration/Pass/gpt")
  ;;     (string-trim (buffer-string))))

  ;; (use-package gptel
  ;;   :ensure t
  ;;   :init
  ;;   (setq-default gptel-model "gpt-3.5-turbo"
  ;;                 gptel-playback t
  ;;                 gptel-default-mode 'org-mode
  ;;                 gptel-api-key #'essl/read-openai-key))
#+end_src
* Org-mode
** Aspect
*** Setup fonts
:Font-faces:
#+begin_src emacs-lisp :results silent
  ;;Size for heading levels
  (dolist (face '((org-level-1 . 1.6)
                  (org-level-2 . 1.5)
                  (org-level-3 . 1.4)
                  (org-level-4 . 1.3)
                  (org-level-5 . 1.2)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font essl/sans-font :weight 'regular :height (cdr face))
    )

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  ;; (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
#+end_src
:END:
*** Org-bullets
Change the aspect of the bullets used in headings
:bullets:
#+begin_src emacs-lisp :results silent
  (use-package org-bullets
    :straight (org-bullets :type git 
  			 :flavor melpa 
  			 :host github 
  			 :repo "integral-dw/org-bullets")
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :custom
    ;; Other styles
    ;; (org-bullets-bullet-list '("◉" "●" "▷" "▶" "●" "✸"))
    ;; (org-bullets-bullet-list '("㊀" "㊁" "㊂" "㊃" "㊄" "㊅"))
    ;; (org-bullets-bullet-list '("➀" "➁" "➂" "➃" "➄" "➅"))
    (org-bullets-bullet-list '("🅐" "🅑" "🅒" "🅓" "🅔" "🅕"))
    )
#+end_src
:END:
** Org babel languages
:load-languages:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package ob-restclient
    :straight (ob-restclient :type git 
  			   :flavor melpa 
  			   :host github 
  			   :repo "alf/ob-restclient.el")
    :after org
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (latex . t)
       (R . t)
       (lisp . t)
       (shell . t)
       (awk . t)
       ;; (yaml . t)
       ;; (restclient . t)
       ;;   (C . t)
       ;;   (calc . t)
       ;;   (java . t)
       ;;   (ruby . t)
       ;;   (sqlite . t)
       ;;   (js . t)
       ))
    (defun my-org-confirm-babel-evaluate (lang body)
      "Do not confirm evaluation for these languages."
      (not (or ;; (string= lang "C")
            ;;	(string= lang "java")
            (string= lang "python")
            (string= lang "emacs-lisp")
            ;; (string= lang "sqlite")
            )))
    (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
    ;; (setq org-src-tab-acts-natively t)
    )
#+END_SRC
:END:
** Org templates
:code-block-templates:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package org-tempo
    :ensure nil
    ;; :mode ("\\.org" . org-mode)
    :after org
    :init
    (add-to-list 'org-structure-template-alist '("lp" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("r" . "src R"))
    (add-to-list 'org-structure-template-alist '("b" . "src bash"))
    (add-to-list 'org-structure-template-alist '("md" . "src markdown"))
    (add-to-list 'org-structure-template-alist '("tx" . "src tex"))
    )
#+END_SRC
:END:
** Org exporting
*** Pandoc exporter
Pandoc converts between a huge number of different file formats.
#+BEGIN_SRC emacs-lisp :results silent
  (use-package ox-pandoc
    :no-require t
    :defer 10
    :straight (ox-pandoc :type git 
  		       :flavor melpa 
  		       :host github 
  		       :repo "emacsorphanage/ox-pandoc"))
#+END_SRC
*** Latex exporting
I’ve had issues with getting BiBTeX to work correctly with the
LaTeX exporter for PDF exporting. By changing the command to
`latexmk` references appear in the PDF output like they
should. Source: http://tex.stackexchange.com/a/161619.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process (list "latexmk -xelatex %f"))
  (setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted")))
  ;;(setq org-latex-pdf-process (list "arara %f"))
#+END_SRC

Latex export configuration [[https://orgmode.org/worg/org-tutorials/org-latex-export.html][Org-tutorials]]
It is necessary to load [[https://superuser.com/questions/896741/how-do-i-configure-org-latex-classes-in-emacs][Ox-latex]]
#+begin_src emacs-lisp :results silent
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("article"
                   "\\documentclass{article}
            [NO-DEFAULT-PACKAGES]
            [NO-PACKAGES]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                   )
                 )
    )
#+end_src
*** Markdown
#+begin_src emacs-lisp :results silent
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
#+end_src
** Ox-hugo
:ox-hugo:
#+begin_src emacs-lisp
  (use-package ox-hugo
    :straight (ox-hugo :type git 
  		     :flavor melpa 
  		     :host github 
  		     :repo "kaushalmodi/ox-hugo")
    :after ox)
#+end_src
:END:
** Org-ref
:org-ref:
#+begin_src emacs-lisp :results silent
  (use-package org-ref
    :straight (org-ref :type git 
  		     :flavor melpa 
  		     :files (
  			     :defaults "org-ref.org" "org-ref.bib" "citeproc" "org-ref-pkg.el") 
  		     :host github 
  		     :repo "jkitchin/org-ref")
    ;; :after org
    :init
    ;;Configuration to allow use of org-ref with ox-hugo
    (with-eval-after-load 'ox
      (defun my/org-ref-process-buffer--html (backend)
        ;;"Preprocess `org-ref' citations to HTML format.
        ;;Do this only if the export backend is `html' or a derivative of that."

        (when (org-export-derived-backend-p backend 'html)
          (org-ref-process-buffer 'html)))
      (add-to-list 'org-export-before-parsing-hook #'my/org-ref-process-buffer--html))

    :config
    (setq
     
     bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

     bibtex-completion-additional-search-fields '(keywords)
     bibtex-completion-pdf-field "File"
     bibtex-completion-display-formats
     '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
       (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
       (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
       (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
       (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
     bibtex-completion-pdf-open-function
     (lambda (fpath)
       (call-process "open" nil 0 nil fpath))
     )

    ;;Keybindings for inserting reference
    (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
    (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
    (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
    )
#+end_src
:END:
:org-ref-helm:
#+begin_src emacs-lisp :results silent
  (use-package org-ref-helm
    :ensure nil
    :after org-ref
    :config
    (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
          org-ref-insert-cite-function 'org-ref-cite-insert-helm
          org-ref-insert-label-function 'org-ref-insert-label-link
          org-ref-insert-ref-function 'org-ref-insert-ref-link
          org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))
#+end_src
:END:
** Org-reveal
:org-reveal:
#+begin_src emacs-lisp :results silent
  (use-package ox-reveal
    :straight (ox-reveal :type git 
  		       :flavor melpa 
  		       :host github 
  		       :repo "yjwen/org-reveal")
    :defer t
    )
#+end_src
:END:
** Org-pomodoro                                :commented:
#+begin_src emacs-lisp
  ;; (use-package org-pomodoro
  ;;   :after org
  ;;   :config
  ;;   ;; (setq org-pomodoro-start-sound "~/.dotfiles/.emacs.d/sounds/focus_bell.wav")
  ;;   ;; (setq org-pomodoro-short-break-sound "~/.dotfiles/.emacs.d/sounds/three_beeps.wav")
  ;;   ;; (setq org-pomodoro-long-break-sound "~/.dotfiles/.emacs.d/sounds/three_beeps.wav")
  ;;   (setq org-pomodoro-finished-sound "/media/saul/Multimedia/Audio/Sounds/Metal_Gong-Dianakc.wav")

  ;;   ;; (dw/leader-key-def
  ;;   ;;  "op"  '(org-pomodoro :which-key "pomodoro"))
  ;;   )
#+end_src
:END:

* Editing
** Smoothscrolling
This makes it so C-n-ing and C-p-ing won’t make the buffer jump
around so much.
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :straight (smooth-scrolling :type git 
  			      :flavor melpa 
  			      :host github 
  			      :repo "aspiers/smooth-scrolling")
    :config
    (smooth-scrolling-mode))
#+END_SRC
** Scratch
Convenient package to create *scratch* buffers that are based on the current buffer’s major mode. This is more convienent than manually creating a buffer to do some scratch work or reusing the initial *scratch* buffer.
#+BEGIN_SRC emacs-lisp :results silent
  (use-package scratch
    :straight (scratch :type git 
  		     :flavor melpa 
  		     :files ("scratch.el" "scratch-pkg.el") 
  		     :host codeberg 
  		     :repo "emacs-weirdware/scratch")
    :commands scratch)
#+END_SRC
** Flyspell
[[http://www.emacswiki.org/emacs/FlySpell][Source]] [[http://emacs.stackexchange.com/questions/13361/how-do-i-disable-the-emacs-flyspell-middle-mouse-correction][Configure buttons]]
:flyspell-flyspell-correct:
#+begin_src emacs-lisp
  ;; (use-package flyspell
  ;;   :hook text-mode
  ;;   :config
  ;;   (setq flyspell-sort-corrections nil)
  ;;   (setq flyspell-issue-message-flag nil)
  ;;   )

  (setq flyspell-sort-corrections nil)
  (setq flyspell-issue-message-flag nil)
    					; Enable for text files
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
    					; Change the mouse button for corrections
  ;; (eval-after-load "flyspell"
  ;;   '(progn
  ;;      (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
  ;;      (define-key flyspell-mouse-map [mouse-3] #'undefined)
  ;;      (define-key flyspell-mouse-map [down-mouse-2] nil)
  ;;      (define-key flyspell-mouse-map [mouse-2] nil)))

  (use-package flyspell-correct
    :straight (flyspell-correct :type git 
    			      :flavor melpa 
    			      :files ("flyspell-correct.el" "flyspell-correct-ido.el" "flyspell-correct-pkg.el") 
    			      :host github 
    			      :repo "d12frosted/flyspell-correct")
    :after flyspell
    :bind (:map flyspell-mode-map ("C-:" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-helm
    :straight (flyspell-correct-helm :type git 
  				   :flavor melpa 
  				   :files ("flyspell-correct-helm.el" "flyspell-correct-helm-pkg.el") 
  				   :host github 
  				   :repo "d12frosted/flyspell-correct")
    :after flyspell-correct)
  #+end_src
:END:
** Aspell                                     :commented:
#+begin_src emacs-lisp
  ;; (setq-default  '("--reverse")) ; "Force" the use of aspell
#+end_src
** Company mode
Autocompletion
#+BEGIN_SRC emacs-lisp :results silent
  (use-package company   
    :straight (company :type git 
    		   :flavor melpa 
    		   :files (
    			   :defaults "icons" ("images/small" "doc/images/small/*.png") "company-pkg.el") 
    		   :host github 
    		   :repo "company-mode/company-mode")
    :hook
    (prog-mode . company-mode)
    (ess-r-mode . company-mode)
    (python-mode . company-mode)
    (inferior-python-mode . company-mode)
    (inferior-ess-r-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection) ;; instead of cycling
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          )
    :custom
    (company-tooltip-limit 10) ;The maximum number of candidates
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.5)
    (company-show-numbers t)
    (company-tooltip-flip-when-above t)
    :config
    (setq company-begin-commands '(self-insert-command))
    (setq company-backends
          '((company-files          ; files & directory
             company-keywords       ; keywords
             company-capf)  ; completion-at-point-functions
            (company-abbrev company-dabbrev)
            ))
    )

  ;; (add-hook 'after-init-hook 'global-company-mode)

  (use-package company-box
    :straight (company-box :type git 
  		       :flavor melpa 
  		       :files (
  			       :defaults "images" "company-box-pkg.el") 
  		       :host github 
  		       :repo "sebastiencs/company-box")
    :hook (company-mode . company-box-mode))
#+END_SRC

*** Company elisp                            :commented:
#+begin_src emacs-lisp
  ;; (defun company-elisp-finder-keyword-backend (command
  ;; 					     &optional arg &rest ign)
  ;;   "`company-backend' for finder-keywords."
  ;;   (case command
  ;;     (prefix
  ;;      (and (require 'finder nil t)
  ;; 	  (or (company-grab ":group '\\(\\(\\sw\\|\\s_\\)*\\)" 1)
  ;; 	      (company-grab "Keywords:.*[ \t]+\\(\\(\\sw\\|\\s_\\)*\\)" 1))))
  ;;     (candidates (all-completions arg finder-known-keywords))
  ;;     (meta (cdr (assoc (intern arg) finder-known-keywords)))))
    #+end_src
** Which Key
#+BEGIN_SRC emacs-lisp :results silent
  (use-package which-key
    :straight (which-key :type git 
  		     :flavor melpa 
  		     :host github 
  		     :repo "justbur/emacs-which-key")
    ;;:defer t
    :config
    (which-key-mode))
#+END_SRC
** Expand region, iedit
- Gradually expands selected region
:expand-region:
   #+begin_src emacs-lisp :results silent
     (use-package expand-region
       :straight (expand-region :type git 
               		   :flavor melpa 
               		   :host github 
               		   :repo "magnars/expand-region.el")
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))

     ;;Mark similar occurences and edit them at the same time
     (use-package multiple-cursors
       :straight (multiple-cursors :type git 
          			      :flavor melpa 
          			      :host github 
          			      :repo "magnars/multiple-cursors.el") 
       :config
       (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
       )

     (use-package iedit
       :straight (iedit :type git 
     		   :flavor melpa 
     		   :host github 
     		   :repo "victorhge/iedit"))
   #+end_src
   :END:

** Yasnippet
:yasnippet:
#+begin_src emacs-lisp :results silent
  (use-package yasnippet
    :straight (yasnippet :type git 
    		       :flavor melpa 
    		       :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") 
    		       :host github 
    		       :repo "joaotavora/yasnippet")
    :defer t
    :config
    (use-package yasnippet-snippets
      :straight (yasnippet-snippets :type git 
  				  :flavor melpa 
  				  :files ("*.el" "snippets" ".nosearch" "yasnippet-snippets-pkg.el") 
  				  :host github 
  				  :repo "AndreaCrotti/yasnippet-snippets"))
    (yas-reload-all)
    :hook
    (org-mode . yas-minor-mode)
    )
  ;; (define-key yas-minor-mode-map (kbd "M-y") 'yas-expand)
#+end_src
:END:
* Dired
** Configuration
:dired-config:
#+BEGIN_SRC emacs-lisp :results silent
  (use-package dired
    :ensure nil
    :init
    ;; Hide details such as permissions or modification date
    (add-hook 'dired-mode-hook 'dired-hide-details-mode)
    :commands
    (dired dired-jump)

    ;;Jumps to the parent level
    :bind (("C-x C-j" . dired-jump))
    :config

    (setq dired-dwim-target t) ;try to guess where to copy...

    :custom
    ;; Sorting folders and files
    ((dired-listing-switches "-agho --group-directories-first"))

    )

  ;; Use icons for folders and files
  (use-package all-the-icons-dired
    :after dired
    :straight (all-the-icons-dired :type git 
          			 :flavor melpa 
          			 :host github 
          			 :repo "wyuenho/all-the-icons-dired")
    :hook (dired-mode . all-the-icons-dired-mode)
    )

  ;;Dired narrow allows filter by pattern, regex
  (use-package dired-narrow
    :after dired
    :straight (dired-narrow :type git 
        			  :flavor melpa 
        			  :files ("dired-narrow.el" "dired-narrow-pkg.el") 
        			  :host github 
        			  :repo "Fuco1/dired-hacks")
    :config
    (bind-key "C-c C-n" #'dired-narrow)
    (bind-key "C-c C-f" #'dired-narrow-fuzzy)
    (bind-key "C-x C-N" #'dired-narrow-regexp)
    )

  ;; Allows open a folder with tab as a subtree
  (use-package dired-subtree
    :after dired
    :straight (dired-subtree :type git 
      			   :flavor melpa 
      			   :files ("dired-subtree.el" "dired-subtree-pkg.el") 
      			   :host github 
      			   :repo "Fuco1/dired-hacks")
    :config
    (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
    (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)
    )

  ;; Prevent opening multiple buffers
  (use-package dired-single
    :after dired
    :straight (dired-single
  	     :type git 
    	     :flavor melpa 
    	     :host codeberg 
    	     :repo "amano.kenji/dired-single")
    :config
    (define-key dired-mode-map [return] 'dired-single-buffer)
    (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
    (define-key dired-mode-map "^" 'dired-single-up-directory)
    )

  (use-package dired-open
    :after dired
    :straight (dired-open 
  	     :type git 
  	     :flavor melpa 
  	     :files ("dired-open.el" "dired-open-pkg.el") 
  	     :host github 
  	     :repo "Fuco1/dired-hacks")
    
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    (add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "eom")
                                  ("pdf" . "atril")
                                  ))
    )

  ;; (use-package dired-hide-dotfiles
  ;;   :ensure t
  ;;   :hook (dired-mode . dired-hide-dotfiles-mode))
#+END_SRC
:END:
* PDF
** PDF viewer                                  :commented:
[[https://stackoverflow.com/questions/8834633/how-do-i-make-org-mode-open-pdf-files-in-evince/8836108#8836108][Source]]
#+begin_src emacs-lisp
  ;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) https://stackoverflow.com/a/8836108/789593
  ;; (add-hook 'org-mode-hook
  ;; 	  '(lambda ()
  ;; 	     (delete '("\\.pdf\\'" . default) org-file-apps)
  ;; 	     (add-to-list 'org-file-apps '("\\.pdf\\'" . "atril %s"))))
#+end_src
** PDF tools
Use pdf-tools as default pdf viewer in emacs. Customize navigation and highlighting
#+begin_src emacs-lisp :results silent
  (use-package pdf-tools
    :straight (pdf-tools :type git 
  		       :flavor melpa 
  		       :files (
  			       :defaults "README" ("build" "Makefile") ("build" "server") "pdf-tools-pkg.el") 
  		       :host github 
  		       :repo "vedang/pdf-tools")
    ;; 
    :defer t
    :config
    ;; initialise
    (pdf-tools-install)
    ;; (pdf-loader-install) ;;to speedup loading
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-width)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; use normal isearch
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    ;; turn off cua so copy works
    ;; (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    ;; more fine-grained zooming
    (setq pdf-view-resize-factor 1.1)
    ;; keyboard shortcuts
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "u") 'pdf-annot-add-underline-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
    ;; customize highlight color
    (setq pdf-annot-default-annotation-properties
          '((t
             (label . "ssl"))
            (text
             (color . "#193365")
             (icon . "Note"))
            (highlight
             (color . "LavenderBlush2")
             ;; (color . "alice blue")
             ;; (color . "peach puff")
             )
            (underline
             (color . "light salmon")
             (color . "chartreuse4"))
            (squiggly
             (color . "orange"))
            (strike-out
             (color . "red"))))
    (setq pdf-annot-color-history '("kakhi" "alice blue" "thistle" "light salmon" ))
    )
#+end_src
* Remote
** TRAMP
:tramp:
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src
:END:
* Others
** yequake-frames
#+begin_src emacs-lisp :result silent
  (use-package yequake
    :straight (yequake :type git 
  		     :flavor melpa 
  		     :host github 
  		     :repo "alphapapa/yequake")
    :init
    (get-buffer-create "tmp-notes")
    :config
    (setq yequake-frames
          '(("tmp-notes" .
             ((width . 0.45)
              (height . 0.45)
              (alpha . 0.85)
              (buffer-fns . ("tmp-notes"))
              (frame-parameters . ((undecorated . t)
                                   (menu-bar-lines . 0)
                                   ))
              ))))
    )
#+end_src

